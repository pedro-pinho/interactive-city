{"_id":"cfenv","_rev":"22-b364884da0757bd038f45947f6689ee4","name":"cfenv","description":"easy access to your Cloud Foundry application environment","dist-tags":{"latest":"1.0.4"},"versions":{"0.2.0":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"0.2.0","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.0.x","ports":"1.1.x","underscore":"1.6.x"},"devDependencies":{"coffee-script":"1.7.x","mocha":"1.19.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@0.2.0","dist":{"shasum":"5dbff3f88192ddcd654262c47b3ec1d50bc04ab8","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-0.2.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"pmuellr","email":"pmuellr@gmail.com"},"maintainers":[{"name":"pmuellr","email":"pmuellr@gmail.com"}],"directories":{}},"1.0.0":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"1.0.0","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.2.x","ports":"1.1.x","underscore":"1.7.x"},"devDependencies":{"coffee-script":"1.8.x","mocha":"1.21.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"gitHead":"17db82f927bae483751100227fd33200ba239ffa","bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@1.0.0","_shasum":"21546e2100d1fe73d8f5062e6b71f325c0b70bbb","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"pmuellr","email":"pmuellr@apache.org"},"maintainers":[{"name":"pmuellr","email":"pmuellr@gmail.com"}],"dist":{"shasum":"21546e2100d1fe73d8f5062e6b71f325c0b70bbb","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-1.0.0.tgz"},"directories":{}},"1.0.1":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"1.0.1","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"git+https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.4.x","ports":"1.1.x","underscore":"1.8.x"},"devDependencies":{"coffee-script":"1.10.x","mocha":"2.3.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"gitHead":"9c0c880435e3f35bf0f7274ae18185355fe4f73b","bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@1.0.1","_shasum":"47b5afaa552eb9a757cb8ecef5d438cbb62daff4","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"pmuellr","email":"pmuellr@apache.org"},"dist":{"shasum":"47b5afaa552eb9a757cb8ecef5d438cbb62daff4","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-1.0.1.tgz"},"maintainers":[{"name":"pmuellr","email":"pmuellr@gmail.com"}],"directories":{}},"1.0.2":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"1.0.2","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"git+https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.4.x","ports":"1.1.x","underscore":"1.8.x"},"devDependencies":{"coffee-script":"1.10.x","mocha":"2.3.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"gitHead":"5a78de378dbdbab199b7ba97a1deaf0b00dd1d1f","bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@1.0.2","_shasum":"a7e0dfc85d0d8cc5482f1dab9435dba7d06118a2","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"pmuellr","email":"pmuellr@apache.org"},"dist":{"shasum":"a7e0dfc85d0d8cc5482f1dab9435dba7d06118a2","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-1.0.2.tgz"},"maintainers":[{"name":"pmuellr","email":"pmuellr@gmail.com"}],"directories":{}},"1.0.3":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"1.0.3","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"git+https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.4.x","ports":"1.1.x","underscore":"1.8.x"},"devDependencies":{"coffee-script":"1.10.x","mocha":"2.3.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"gitHead":"b3eeec9032a98530d8aaffa0d6fbdb3ee10d8757","bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@1.0.3","_shasum":"472fd0c05b3bdb2d0ede775e124803ab12572793","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"pmuellr","email":"pmuellr@apache.org"},"dist":{"shasum":"472fd0c05b3bdb2d0ede775e124803ab12572793","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-1.0.3.tgz"},"maintainers":[{"name":"pmuellr","email":"pmuellr@gmail.com"}],"directories":{}},"1.0.4":{"name":"cfenv","main":"./lib/cfenv","description":"easy access to your Cloud Foundry application environment","version":"1.0.4","author":{"name":"pmuellr"},"license":"Apache-2.0","homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"git+https://github.com/cloudfoundry-community/node-cfenv.git"},"dependencies":{"js-yaml":"3.7.x","ports":"1.1.x","underscore":"1.8.x"},"devDependencies":{"coffee-script":"1.12.x","mocha":"3.2.x","expect.js":"0.3.x"},"scripts":{"start":"node server.js"},"gitHead":"4c29ce1d1dbb65f89abe33b5325201dd2b8eb7c5","bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"_id":"cfenv@1.0.4","_shasum":"b97a1eebde255eced8367a0f4afbc2f85438e0b4","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.4","_npmUser":{"name":"pmuellr","email":"pmuellr@apache.org"},"dist":{"shasum":"b97a1eebde255eced8367a0f4afbc2f85438e0b4","tarball":"https://registry.npmjs.org/cfenv/-/cfenv-1.0.4.tgz"},"maintainers":[{"name":"pmuellr","email":"pmuellr@apache.org"},{"name":"srl","email":"srl@icu-project.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cfenv-1.0.4.tgz_1486048623110_0.042817438719794154"},"directories":{}}},"readme":"cfenv - easy access to your Cloud Foundry application environment\n================================================================================\n\nThe cfenv package provides functions to parse Cloud Foundry-provided environment\nvariables.  Provides easy access to your port, http\nbinding host name/ip address, URL of the application, etc.  Also provides\nuseful default values when you're running locally.\n\nThe package determines if you are running \"locally\" versus running as a\nCloud Foundry app, based on whether the `VCAP_APPLICATION` environment variable is set.\nIf not set, the functions run in \"local\" mode, otherwise they run in \"cloud\"\nmode.\n\n\nquick start\n================================================================================\n\n    var cfenv = require(\"cfenv\")\n\n    var appEnv = cfenv.getAppEnv()\n    ...\n    // start the server on the given port and binding host, and print\n    // url to server when it starts\n\n    server.listen(appEnv.port, appEnv.bind, function() {\n        console.log(\"server starting on \" + appEnv.url)\n    })\n\nThis code snippet above will get the port, binding host, and full URL to your HTTP\nserver and use them to bind the server and print the server URL when starting.\n\n\nrunning in Cloud Foundry vs locally\n================================================================================\n\nThis package makes use of a number of environment variables that are set when\nyour application is running in Cloud Foundry.  These include:\n\n* `VCAP_SERVICES`\n* `VCAP_APPLICATION`\n* `PORT`\n\nIf these aren't set, the `getAppEnv()` API will still return useful values,\nas appropriate.  This means you can use this package in your program and\nit will provide useful values when you're running in Cloud Foundry AND\nwhen you're running locally.\n\n\napi\n================================================================================\n\nThe `cfenv` package exports the following function:\n\n\n`getAppEnv(options)`\n--------------------------------------------------------------------------------\n\nGet the core bits of Cloud Foundry data as an object.\n\nThe `options` parameter is optional, and can contain the following properties:\n\n* `name` - name of the application\n\n  This value is used as the default `name` property of the returned object,\n  and as the name passed to\n  [the ports package `getPort()` function](https://www.npmjs.org/package/ports)\n  to get a default port.\n\n  If not specified, the name will looked for in the following places:\n\n  * the `name` property of the `VCAP_APPLICATION` environment variable\n  * the `name` property from the `manifest.yml` file in the current directory\n  * the `name` property from the `package.json` file in the current directory\n\n* `protocol` - protocol used in the generated URLs\n\n  This value is to override the default protocol used when generating\n  the URLs in the returned object.  It should be the same format as\n  [node's url `protocol` property](http://nodejs.org/api/url.html).\n  That is, it should end with a `:` character.\n\n* `vcap` - provide values for the `VCAP_APPLICATION` and `VCAP_SERVICES`\n  environment variable, when running locally.  The object can have\n  properties `application` and/or `services`, whose values are the same\n  as the values serialized in the respective environment variables.\n\n  Note that the `url` and `urls` properties of the returned object are not\n  based on the vcap `application` object, when running locally.\n\n  This option property is ignored if not running locally.\n\nThis function returns an object with the following properties:\n\n* `app`:      object version of `VCAP_APPLICATION` env var\n* `services`: object version of `VCAP_SERVICES` env var\n* `name`:     name of the application\n* `port`:     HTTP port\n* `bind`:     hostname/ip address for binding\n* `urls`:     URLs used to access the servers\n* `url`:      first URL in `urls`\n* `isLocal`:  false if a valid `VCAP_APPLICATION` env var was found, true otherwise\n\nThe returned object also has the following methods available:\n\n* `appEnv.getServices()`\n* `appEnv.getService(spec)`\n* `appEnv.getServiceURL(spec, replacements)`\n* `appEnv.getServiceCreds(spec)`\n\nIf no value can be determined for `port`, and the `name` property on the\n`options` parameter is not set and cannot be determined,\na port of 3000 will be used.\n\nIf no value can be determined for `port`, and the `name` property on the\n`options` parameter is set or can otherwise be determined,\nthat name will be passed to\n[the ports package `getPort()` function](https://www.npmjs.org/package/ports)\nto get a default port.\n\nThe protocol used for the URLs will be `http:` if the app\nis running locally, and `https:` otherwise; you can\nforce a particular protocol by using the `protocol` property\non the `options` parameter.\n\nWhen running in Cloud Foundry, the `url` and `urls` values will have\n`localhost` as their hostname, if the actual hostnames cannot be determined.\n\n\nAppEnv methods\n--------------------------------------------------------------------------------\n\nThe following methods are also available on the object returned by\n`cfenv.getAppEnv()`.\n\n\n\n**`appEnv.getServices()`**\n--------------------------------------------------------------------------------\n\nReturn all services, in an object keyed by service name.\n\nNote that this is different than the `services` property\nreturned from `getAppEnv()`.\n\nFor example, assume VCAP_SERVICES was set to the following:\n\n    {\n        \"user-provided\": [\n            {\n                \"name\": \"cf-env-test\",\n                \"label\": \"user-provided\",\n                \"tags\": [],\n                \"credentials\": {\n                    \"database\": \"database\",\n                    \"password\": \"passw0rd\",\n                    \"url\": \"https://example.com/\",\n                    \"username\": \"userid\"\n                },\n                \"syslog_drain_url\": \"http://example.com/syslog\"\n            }\n        ]\n    }\n\nIn this case, `appEnv.services` would be set to that same object, but\n`appEnv.getServices()` would return\n\n    {\n        \"cf-env-test\": {\n            \"name\": \"cf-env-test\",\n            \"label\": \"user-provided\",\n            \"tags\": [],\n            \"credentials\": {\n                \"database\": \"database\",\n                \"password\": \"passw0rd\",\n                \"url\": \"https://example.com/\",\n                \"username\": \"userid\"\n            },\n            \"syslog_drain_url\": \"http://example.com/syslog\"\n        }\n    }\n\n\n**`appEnv.getService(spec)`**\n--------------------------------------------------------------------------------\n\nReturn a service object by name.\n\nThe `spec` parameter should be a regular expression, or a string which is the\nexact name of the service.  For a regular expression, the first service name\nwhich matches the regular expression will be returned.\n\nReturns the service object from VCAP_SERVICES or null if not found.\n\n\n\n**`appEnv.getServiceURL(spec, replacements)`**\n--------------------------------------------------------------------------------\n\nReturns a service URL by name.\n\nThe `spec` parameter should be a regular expression, or a string which is the\nexact name of the service.  For a regular expression, the first service name\nwhich matches the regular expression will be returned.\n\nThe `replacements` parameter is an object with the properties used in\n[node's url function `url.format()`](http://nodejs.org/api/url.html#url_url_format_urlobj).\n\nReturns a URL generated from VCAP_SERVICES or null if not found.\n\nTo generate the URL, processing first starts with a `url` property\nin the service credentials.  You can override the `url` property in the\nservice credentials (if no such property exists), with a `replacements`\nproperty of `url`, and a value which is the name of the property in\nthe service credentials whose value contains the base URL.\n\nThat url is parsed with\n[node's url function `url.parse()`](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost)\nto get a set of initial url properties.\nThese properties are then overridden by entries in `replacements`, using the\nfollowing operation, for a given replacement `key` and `value`.\n\n     url[key] = service.credentials[value]\n\nThe URL `auth` replacement is a bit special, in that it's value should\nbe a two-element array of [userid, password], where those values are\nkeys in the service.credentials\n\nFor example, assume VCAP_SERVICES was set to the following:\n\n    {\n        \"user-provided\": [\n            {\n                \"name\": \"cf-env-test\",\n                \"label\": \"user-provided\",\n                \"tags\": [],\n                \"credentials\": {\n                    \"database\": \"database\",\n                    \"password\": \"passw0rd\",\n                    \"url\": \"https://example.com/\",\n                    \"username\": \"userid\"\n                },\n                \"syslog_drain_url\": \"http://example.com/syslog\"\n            }\n        ]\n    }\n\nAssume you run the following code:\n\n    url = appEnv.getServiceURL(\"cf-env-test\", {\n        pathname: \"database\",\n        auth:     [\"username\", \"password\"]\n    })\n\nThe `url` result will be `https://userid:passw0rd@example.com/database`\n\nNote that there **MUST** be a `url` property in the credentials,\nor replacement for it, in the\nservice, or the call will return `null`.  Also, because the `url` is parsed\nfirst with `url.parse()`, there will be a `host` property in the result, so\nyou won't be able to use the `hostname` and `port` values directly.  You\ncan **ONLY** set the resultant hostname and port with the `host` property.\n\nNote that `url.parse()` and the later `url.format()` calls to construct the\nresult, will not produce pleasing results for \"unusual\" URLs, especially\nthose which do not use `http:` or `https:` protocols.  The `url` `parse()`\nand `format()` methods will not be used though, if you have no replacement\nvalues, or the only replacement property is `url`, and so are safe to\nuse in that case.\n\nSince the `appEnv.getServiceURL()` method operates against the\n`appEnv.services` property, you can fudge this object if that makes your\nlife easier.\n\n**`appEnv.getServiceCreds(spec)`**\n--------------------------------------------------------------------------------\n\nReturns the `credentials` object of a service by name.\n\nThe `spec` parameter is the same as that used by the `appEnv.getServiceURL()`\nmethod.  If there is no service that matches the `spec` parameter, this method\nwill return `null`.\n\nIf there is a service that matches the `spec` parameter, the value of it's\n`credentials` property will be returned.  If for some reason, there is no\n`credentials` property on the service, an empty object - `{}` - will be\nreturned.\n\n\n\ntesting with Cloud Foundry\n================================================================================\n\nYou can push this project as a Cloud Foundry project to try it out.\n\nFirst, create a service name `cf-env-test` with the following command:\n\n    cf cups cf-env-test -p \"url, username, password, database\"\n\nYou will be prompted for these values; enter something reasonable like:\n\n    url>      http://example.com\n    username> userid\n    password> passw0rd\n    database> the-db\n\nNext, push the app with `cf push`.\n\nWhen you visit the site, you'll see the output of various cfenv calls.\n\n\nchanges\n================================================================================\n\n**1.0.4** - 2017/01/13\n\n- fix to getServiceURL() with non-http URLs  - [issue #21][]\n\n[issue #21]: https://github.com/cloudfoundry-community/node-cfenv/issues/21\n\n**1.0.3** - 2014/10/02\n\n- fixes for compatibility with Diego - [issue #11][]\n\n[issue #11]: https://github.com/cloudfoundry-community/node-cfenv/issues/11\n\n**1.0.2** - 2014/09/29\n\n- delete a lingering `npm-debug.log` left behind\n- add `npm-debug.log` to `.gitignore`\n\n**1.0.1** - 2014/09/29\n\n- remove node_modules from .cfignore - [issue #8][]\n- updated package dependencies\n- changed README.md to correct sample service to cf-env-test\n- files in lib/ recompiled due to coffee-script update\n\n[issue #8]: https://github.com/cloudfoundry-community/node-cfenv/issues/8\n\n**1.0.0** - 2014/09/03\n\n- initial 1.0.0 release\n\n\nlicense\n================================================================================\n\nApache License, Version 2.0\n\n<http://www.apache.org/licenses/LICENSE-2.0.html>\n","maintainers":[{"name":"pmuellr","email":"pmuellr@apache.org"},{"name":"srl","email":"srl@icu-project.org"}],"time":{"modified":"2017-12-02T04:09:18.382Z","created":"2014-05-22T21:40:17.870Z","0.2.0":"2014-05-22T21:40:17.870Z","1.0.0":"2014-09-03T13:16:45.152Z","1.0.1":"2015-09-29T14:07:39.063Z","1.0.2":"2015-09-30T03:13:14.265Z","1.0.3":"2015-10-04T01:50:41.627Z","1.0.4":"2017-02-02T15:17:05.351Z"},"homepage":"https://github.com/cloudfoundry-community/node-cfenv","repository":{"type":"git","url":"git+https://github.com/cloudfoundry-community/node-cfenv.git"},"author":{"name":"pmuellr"},"bugs":{"url":"https://github.com/cloudfoundry-community/node-cfenv/issues"},"license":"Apache-2.0","readmeFilename":"README.md","users":{"kelapure":true,"zambon":true,"srl":true,"rschmidmeister":true,"crshnburn":true,"jmsherry":true,"fredcorn":true,"shiyanfeng":true,"vchouhan":true,"cooboor":true},"_attachments":{},"_etag":"\"5a22276e-4f29\"","_lastModified":"Sat, 2 Dec 2017 4:09:18 GMT"}